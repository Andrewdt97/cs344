Andrew Thomas
CS 344 - Lab08
03/29/19

What does the Pearson correlation coefficient measure? Identify one example value from the correlation table you compute and explain why it makes sense.
The Pearson coefficient measures how related two variables are. In our case, we are interested in what statistics affect the median home value. Median income has the greatest positive correlation which makes sense because more wealthy people are more likely to have more expensive homes.

Submit your solutions to tasks 1â€“2. Include the features you selected for task 1 and the synthetic features you developed for task 2; include the final RMS errors but not the training output. Did you beat the Google-provided baselines?

Task 1:
# We will add the persons per household value to see how bigger households affect price
training_examples["persons_per_house"] = training_examples["population"] / training_examples["households"]
validation_examples["persons_per_house"] = validation_examples["population"] / validation_examples["households"]

minimal_features = ["median_income", "persons_per_house", "latitude"]

assert minimal_features, "You must select at least one feature!"

minimal_training_examples = training_examples[minimal_features]
minimal_validation_examples = validation_examples[minimal_features]

#
# Don't forget to adjust these parameters.
#
train_model(
    learning_rate=0.01,
    steps=1000,
    batch_size=5,
    training_examples=minimal_training_examples,
    training_targets=training_targets,
    validation_examples=minimal_validation_examples,
    validation_targets=validation_targets)


Task 2:
# Shameless copy and paste after my own distance_from_sanfran colum had a 0.0 correlation
def select_and_transform_features(source_df):
  LATITUDE_RANGES = zip(range(32, 44), range(33, 45))
  selected_examples = pd.DataFrame()
  selected_examples["median_income"] = source_df["median_income"]
  for r in LATITUDE_RANGES:
    selected_examples["latitude_%d_to_%d" % r] = source_df["latitude"].apply(
      lambda l: 1.0 if l >= r[0] and l < r[1] else 0.0)
  return selected_examples

selected_training_examples = select_and_transform_features(training_examples)
selected_validation_examples = select_and_transform_features(validation_examples)
# This was tweaked for effeciency. Got a little better than default!
_ = train_model(
    learning_rate=0.05,
    steps=400,
    batch_size=5,
    training_examples=selected_training_examples,
    training_targets=training_targets,
    validation_examples=selected_validation_examples,
    validation_targets=validation_targets)