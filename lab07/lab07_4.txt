Andrew Thomas
CS 344 Lab07

a.
1. The min and max data seems to be a bit crazy in different places. For instance, at best there is a block that has 8 people per bedroom.
2. It looks like we are sorting our data geographically so we are training on different houses than we are trying to predict.
3. It looks like I was correct, we aren't shuffling.
4. Shamelessly copied
  training_input_fn = lambda: my_input_fn(
      training_examples, 
      training_targets["median_house_value"], 
      batch_size=batch_size)
  predict_training_input_fn = lambda: my_input_fn(
      training_examples, 
      training_targets["median_house_value"], 
      num_epochs=1, 
      shuffle=False)
  predict_validation_input_fn = lambda: my_input_fn(
      validation_examples, validation_targets["median_house_value"], 
      num_epochs=1, 
      shuffle=False)
...
    training_predictions = linear_regressor.predict(input_fn=predict_training_input_fn)
    training_predictions = np.array([item['predictions'][0] for item in training_predictions])
    
    validation_predictions = linear_regressor.predict(input_fn=predict_validation_input_fn)
    validation_predictions = np.array([item['predictions'][0] for item in validation_predictions])
5. Shamelessly copied
test_examples = preprocess_features(california_housing_test_data)
test_targets = preprocess_targets(california_housing_test_data)

predict_test_input_fn = lambda: my_input_fn(
      test_examples, 
      test_targets["median_house_value"], 
      num_epochs=1, 
      shuffle=False)

test_predictions = linear_regressor.predict(input_fn=predict_test_input_fn)
test_predictions = np.array([item['predictions'][0] for item in test_predictions])

root_mean_squared_error = math.sqrt(
    metrics.mean_squared_error(test_predictions, test_targets))

print("Final RMSE (on test data): %0.2f" % root_mean_squared_error)

b. Just like with a human analyst, how you present your data matters. In some regards, the machine is less itellegent than a human. I could tell very easily that our testing and validation data was sorted geographically, but the computer had no idea. You have to have you model train on relevant examples. Using validation data to see how your model matches up is a very effective way to test teh accuracy of your model.